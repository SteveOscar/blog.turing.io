---
title: Handling the Firehose of Knowledge
date: 2016-01-22 17:43 UTC
tags:
author: Steven Olson
layout: post
---
### Surviving the Firehose of Knowledge

Having just completed the second of four modules of classes at Turing, I'm beginning to have more of a grip on the learning environment: an intense firehose of knowledge that is turned on students. And while the first module certainly required absorbing large amounts of new concepts each week, the challenges had more to do with hard logic. Module 2, where students have a good foundation in ruby and basic programming concepts, is when the flow really opens up. Sinatra, the MVC architecture, RSpec, web scraping, the whole behemoth of Rails, html/css, heroku, bits of Javascript... it quickly becomes a balancing act of trying to retain some percentage of what's already been presented, and keeping up with the new stuff. And while, on the level of pure intellectual stress, it's nice to get away from Module 1, the new challenge is to make the most of the information overload.  

The predicament comes when you're finished with whatever work is required for the next day, and there are still a few hours left in the evening. Review what you've been learning that week? Go back over older concepts that are getting lost in the fog (Sinatra)? Study something outside of what's covered in school? Just relax? It's easy to get stuck in a kind of indecisive half-commitment to whatever you choose, and then really not making any progress. The reality is that it's not possible to master every topic as it comes.  

One of the most effective ways of dealing with this situation is to devote at least a few hours each week to a personal side project, something that mixes concepts you've already covered with a few new things. The notion of conceptualizing a project idea that's worth working on is hard for many new developers, but if you can at least choose a topic and tools that you're interested in, that makes it a lot easier to stay engaged and focused. If nothing else, Google can provide good suggestions of side projects for new developers. Learning to program, like learning almost anything, really comes down to repetition. Building up personal projects from scratch puts you through the whole process. This hands-on practice is much more valuable than going through another tutorial again, in my experience. And pushing yourself to try a few new things along the way keeps things challenging.  

I've always been into movies, so one of the side projects I decided to work on during module 2 was a movie suggestion app. I wanted to stay fresh on Sinatra, and also wanted to try out web scraping. I ended up building a little site that scrapes a movie review aggregator and dynamically creates most of the page content on each visit. I learned a few new things along the way, and reinforced some concepts from school. In my experience, this was the most valuable time I spent outside of required school work. The satisfaction of making something on your own, combined with the experience and repetition of building it, was well worth carving out a few hours a week for. I'd recommend anyone struggling with prioritizing their study time to strongly consider diving into a side project.  


---
**Steven Olson** is a Turing student in the 1510 cohort. Before Turing, he worked for nearly a decade as a commercial fisherman in Alaska and studied creative writing at Colorado Mesa University. You can find his movie suggestion site [here](http://www.nonshittymovies.com), and peruse his photography [here](http://www.theretohere.com).
